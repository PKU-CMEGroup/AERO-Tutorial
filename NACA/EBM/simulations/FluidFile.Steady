// -----------------------------------------------------------------------------
// SIMULATION DESCRIPTION:   
// Steady simulation for flow over a NACA airfoil 
// Inviscid flow with Euler equation
// Implicit time integration method
// Embedded boundary method
//  
// FLUID GEOMETRY:    sources/fluid.top
// STRUCTURE GEOMETRY:    sources/structure.top
// -----------------------------------------------------------------------------

under Problem {
  Type = Steady;
  Mode = NonDimensional;
  Framework = Embedded;
}

under Input {
  GeometryPrefix = "../data/fluidmodel";
  EmbeddedSurface = "../sources/embeddedSurface.top";
}

under Output {
  under Postpro {
    Frequency = 100;
    Prefix = "results.Steady/";
    Residual = "Residual.out";
    LiftandDrag = "../postpro.Steady/LiftandDrag.out";
    PostprocessSides = 1;
    EmbeddedSurfacePressureCoefficient = "../postpro.Steady/EmbeddedSurfacePressureCoefficient.xpost";
    Pressure = "Pressure.bin";
    Mach = "Mach.bin";
  }
  under Restart {
    Frequency = 0;
    Prefix = "references.Steady/";
    Solution = "Solution.bin";
    RestartData = "Restart.data";
    Position = "Position.bin";
    EmbeddedPosition = "EmbeddedPosition.dat";
  }
}

under BoundaryConditions {
  under Inlet {
    Type = External;
    Mach = 0.8;
    Alpha = 0.0;
    Beta = 5.0;
  }
}

under ReferenceState {  
  Length = 1.0;
}

under Equations {  
  Type = Euler;   
  under FluidModel[0] {
    Fluid = PerfectGas;
    under GasModel {
      SpecificHeatRatio = 1.4;
    }
  }
}

under Space {     
  under NavierStokes {
    Flux = Roe;
    Reconstruction = Linear;
    AdvectiveOperator = FiniteVolume;
    Limiter = VanAlbada;
    Gradient = LeastSquares;
    Dissipation = SecondOrder;
    Beta = 0.3333333333333333;
    Gamma = 1.0;
  }
  under Boundaries {
    Type = StegerWarming;
  }
}

under Time {
  MaxIts = 500;
  Eps = 1.0E-8;
  under CflLaw {
    Strategy = Fixed;
    Cfl0 = 100.0;
  }
  CheckLinearSolver = Off;
  Type = Implicit;
  under Implicit {
    Type = BackwardEuler;
    MatrixVectorProduct = FiniteDifference;
    under Newton {
      MaxIts = 1;
      Eps = 0.01;
      FailSafe = Off;
      under LinearSolver {
        under NavierStokes {
          Type = Gmres;
          MaxIts = 50;
          KrylovVectors = 50;
          Eps = 0.01;
          under Preconditioner {
            Type = Ras;
            Fill = 0;
          }
        }
      }
    }
  }
}


under EmbeddedFramework {
  TypeHalfRiemannProblem = Surrogate;
  RiemannNormal = Structure;  
}
