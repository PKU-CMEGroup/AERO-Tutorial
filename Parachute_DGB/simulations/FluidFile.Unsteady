under Problem {
  Type   = Unsteady;
  Mode   = Dimensional;
  Prec   = NonPreconditioned;
  Framework = Embedded;
}

under AdaptiveMeshRefinement {
  
 under SelectionCriterion[0] {
 // For the canopy
    Type = WallProximity;
    under WallProximityCriterion {
      OuterZone_d = 1.0;
      OuterZone_H = 1.0;
      InnerZone_D = 0.1;
      InnerZone_H = 0.05;
      DeltaPlus = 1.0;
      EdgeLengthMinMaxRatio = 0.4;
     
    }
    under RefinementDomain{    
      Type = Box;	 
      under Box {
      	    X0 = -20.0;
	    Y0 = -20.0;
	    Z0 = 35.0;
	    X1 =  20.0;
	    Y1 =  20.0;
	    Z1 = 60.0;
      }
    }
    
    MinimumEdgeLength = 5e-2;
    NumLevels = 10;
    PreRefine = On;
  }

  under SelectionCriterion[1] {
  //  For the whole domain
      Type = Hessian;
      under HessianCriterion {
      SensorType = Velocity;
      Threshold = 4.e-2;
       HessianConstruction = LeastSquares;
       CoarseningThreshold = 8e-3;
    }
    PreRefine = Off;
    MinimumEdgeLength = 1e-1;
    NumLevels = 1;
  }


 under RefinementDomain {
      Type = Sphere;
      under Sphere {
      	    Center_x = 0.0;
            Center_y = 0.0;
            Center_z = 30.00;
            Radius = 45;
      }
  }

  Mode = NonDimensional; 
  RecomputeWallDistance = 2;  
  BisectionStrategy = Isotropic;
  MaximumRefinementIterations = 1000;
  MaximumCoarseningIterations = 1000;
  BalancingFrequency = 100;
  ItrFactor = 1000.0;
  UseUnsteadyStrategy = 1;
  Frequency = 100;
}


under Input {
  Connectivity = "references.Capsule/fluidmodel.con";
  Geometry = "references.Capsule/fluidmodel.msh";
  Decomposition = "references.Capsule/fluidmodel.dec";
  CpuMap = "../data/fluidmodel.400cpu";
  EmbeddedSurface = "../sources/embeddedSurface.top";

  
  // NOTE: restart
  EmbeddedPosition = "references.Pingpong/EmbeddedPosition.data";
  Solution = "references.Capsule/Solution.bin";
  RestartData = "references.Capsule/Restart.data";
}
                                                                                                 
under Output {
  under Postpro {
    PostprocessSides = 2;
    Prefix   = "results.Unsteady/";
    Mach = "Mach";
    EmbeddedSurfaceDisplacement = "embeddedsurfacedisplacement";
    Frequency = 1000;
  }
  under Restart {
    Frequency = 1000;
    Prefix   = "references.Unsteady/";
    Solution = "Solution.bin";
    RestartData = "Restart.data";
    Position = "Position.data";
    EmbeddedPosition = "EmbeddedPosition.data";
  }
}

under Equations {
  Type = NavierStokes;
  under FluidModel[0] {
    Fluid = PerfectGas;
    under GasModel {
      SpecificHeatRatio = 1.33;
      IdealGasConstant = 188.4;
    }
  }
  under ViscosityModel {
    Type = Sutherland;
    SutherlandConstant = 1.572085931e-6;
    SutherlandReferenceTemperature = 240;
    //ViscosityRatio = 1000.0;  
 }

  under TurbulenceClosure {
    Type = LESModel;
    under LESModel{
      Type = Vreman;
      under Vreman {
         Cs = 0.07;
      }
      Delta = Volume;
    }
  }
}


under Surfaces {
  under SurfaceData[1] {
    BoundaryConditionID = 0;
  }

  under SurfaceData[2] {
    BoundaryConditionID = 0;
  }
  
  under SurfaceData[6] {
    //Capsule
    ComputeForces = True;			
    SeparateForces = True;
  }

}

under BoundaryConditions {
  under Inlet {
    Type    = External;
    Mach    = 1.8;
    Density = 0.0067;
    Pressure = 260.0;
    Alpha   = 90.0;
    Beta    = 0.0;
  }
  under Wall {
    Type        = Adiabatic;
    Integration = Full; 
  }  
  under BoundaryData[0] {
    Type = PorousWall;
    Porosity = 0.08;
  }
}

under Space {
  under NavierStokes {
    Flux              = Roe;
    Reconstruction    = Linear;
    AdvectiveOperator = FiniteVolume;
    Limiter           = VanAlbada;   
    Gradient          = LeastSquares;
    Beta              = 0.33333333333333333;
    Gamma             = 1.0;
  }
  under Boundaries {
    Type = StegerWarming;
  }
}


under Time {
  Type = Implicit;
  MaxIts = 100000;
  MaxTime = 0.3;
  under CflLaw{
      Strategy = Fixed;
      Cfl0 = 5.0;
      CflMax = 5.0;
 }
  under Implicit {
    MatrixVectorProduct = FiniteDifference;
    TurbulenceModelCoupling = Weak;
    under Newton {
      MaxIts = 3;
      Eps = 0.001;
      FailSafe = AlwaysOn;
      under LinearSolver {
        under NavierStokes {
          Type = Gmres;
          MaxIts = 100;
          KrylovVectors = 100;
          Eps = 0.01;
          under Preconditioner {
            Type = Ras;
            Fill = 0;
          }
        }
        under TurbulenceModel {
          Type = Gmres;
          MaxIts = 30;
          KrylovVectors = 30;
          Eps = 0.01;
          under Preconditioner {
            Type = Ras;
            Fill = 0;
          }
        }
      }
    }
  }
}





under EmbeddedFramework {
  TypeHalfRiemannProblem = Surrogate;
  RiemannNormal = Fluid;  
}


